"""
Задание 1.

Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива

Сделайте замеры времени выполнения кода с помощью модуля timeit

Оптимизируйте, чтобы снизить время выполнения
Проведите повторные замеры.

Добавьте аналитику: что вы сделали и почему!!!
Без аналитики задание не принимается

И прошу вас обратить внимание, что то, что часто ошибочно называют генераторами списков,
на самом деле к генераторам отношения не имеет. Это называется "списковое включение" - list comprehension.
"""
from timeit import timeit


def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr

def func_2(nums):
    return[i for i, in enumerate(nums) if el % 2 == 0]




print(timeit(
    """def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr"""))



print(timeit("""

def func_2(nums):
    return[i for i, in enumerate(nums) if el % 2 == 0]
            
    """))

'''
Добавьте аналитику: что вы сделали и почему!!!
Без аналитики задание не принимается.

Был изменёна функция func_1 в пользу лаконичности, при этом не произошло сколь либо изменения скорости алгоритма, 
которое показано замерами циклов через timeit.Это показатель того, что
лаконичность и читабельность имеет преимущество над грамозкими конструкциями.     
'''